<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="form-element-list mg-t-30">
            <form asp-action="PrintSupPayslip">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 cmp-tb-hd">
                        <h2>Print Farmer Payslip</h2>
                    </div>
                    <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12" id="zone1">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <div class="form-group">
                            <input name="statement" type="radio" id="individual_farmers" />
                            <label class="control-label" for="individual_farmers">Individual Farmer</label>
                        </div>
                        
                        <div class="form-group">
                            <input name="statement" type="radio" id="bank_farmers" />
                            <label class="control-label" for="bank_farmers">By Bank</label>
                        </div>
                    </div>
                    
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                            <div class="nk-int-st">
                                <div class="form-group">
                                    <label class="control-label">End Month Date</label>
                                    <input id="date" type="date" class="form-control" required />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row" id="farmer_section">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                            <div class="nk-int-st">
                                <div class="form-group">
                                    <label class="control-label">Farmer Number</label>
                                    <input id="sno" class="form-control" required />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                            <div class="nk-int-st">
                                <div class="form-group">
                                    <label class="control-label">Farmer Name</label>
                                    <input id="name" readonly class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row" id="bank_section">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                            <div class="nk-int-st">
                                <div class="form-group">
                                    <label class="control-label">Bank</label>
                                    <select id="bank" class="chzn-select form-control" asp-items="@ViewBag.bankNames" required>
                                        <option value=""></option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <a id="print" class="btn btn-success">Print
                            <img id="payslip_loading" src="~/Images/Loading.gif" alt="Loading" width="50" height="30">
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        $(function () {
            let standingOrders = @Html.Raw(Json.Serialize(ViewBag.standingOrders));
            $(".chzn-select").chosen();
            $('#payslip_loading').hide();
            var today = new Date().toISOString().split('T')[0];
            $("#date").val(today);
            $('#sno').on('keyup', function () {
                getSupplier();
            });
            $("#individual_farmers").prop("checked", true);
            $("#bank_farmers").prop("checked", false);
            if ($('#individual_farmers').is(':checked')) {
                $('#farmer_section').show();
                $('#bank_section').hide();
            }
            if ($('#bank_farmers').is(':checked')) {
                $('#bank_section').show();
                $('#farmer_section').hide();
            }
            
            $('input[type=radio]').change(function () {
                if ($('#individual_farmers').is(':checked')) {
                    $('#farmer_section').show();
                    $('#bank_section').hide();
                }
                if ($('#bank_farmers').is(':checked')) {
                    $('#bank_section').show();
                    $('#farmer_section').hide();
                }
            });

            $('#print').on('click', function () {
                $('#payslip_loading').show();
                var date = $("#date").val();
                var name = $("#name").val();
                var code = $("#sno").val();
                var operation = "printSupPayslip";

                if ($('#individual_farmers').is(':checked')) {
                    code = $("#sno").val();
                    operation = "printSupPayslip";
                }
                    if ($('#bank_farmers').is(':checked')) {
                    code = $("#bank").val();
                    operation = "getBankFarmersPayslip";
                }

                var filter = {
                    date: date,
                    code: code,
                    name: name
                };

                if (code && date) {
                    $.ajax({
                        type: 'POST',
                        url: operation,
                        contentType: 'application/json',
                        data: JSON.stringify(filter),
                        success: function (response) {
                            $('#payslip_loading').hide();
                            $("#date").val('');
                            $("#sno").val('');
                            var content = '';
                            if ($('#individual_farmers').is(':checked')) {
                                content = generateHTML(response, filter);
                            }
                            if ($('#bank_farmers').is(':checked')) {
                                content = generateBanksHTML(response, filter);
                            }
                            printJS({
                                printable: content,
                                type: 'raw-html',
                                style: '.blueText {color:blue;}; #printMe { font-size: 11px; }'
                            });
                        },
                        failure: function (response) {
                        }
                    }).then(function () {
                        // ...
                    });
                }
            });
            // individual_farmers, bank_farmers, date, bank, sno, bank_section, farmer_section
            function getSupplier() {
                var sno = $('#sno').val();
                var branch = $("#branch").val();
                $.ajax(
                    {
                        type: 'GET',
                        url: `selectedDateIntake?sno=${sno}&branch=${branch}`,
                        contentType: 'application/json',
                        success: function (response) {
                            $("#name").val(response.supplier.Names);
                        },
                        failure: function (response) {
                        }
                    }).then(function () {

                    });
            }

            function generateHTML(response, filter) {
                let mevng = $('#mevng').val();
                debugger
                response.supplier = response.supplier ? response.supplier : {};
                response.transporter = response.transporter ? response.transporter : {};
                let date = new Date(filter.date).toLocaleString('en-us', { month: 'short', year: 'numeric' });
                let maxLength = 6;
                let saccoLoans = response.loans.map(l => {
                    let loanCode = l.LoanCode.length < maxLength ? l.LoanCode : l.LoanCode.substring(0, maxLength) + '...'
                    var amountt = Number(parseFloat(l.Amount).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Balancess = Number(parseFloat(l.Balance).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    return `<tr>
                                <td>${loanCode}</td>
                                <td>${amountt}</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>${Balancess}</td>
                            </tr>`;
                });
                var strSaccoLoans = saccoLoans.join('');
                let saccoOtherDed = response.deductionsbal.map(l => {
                    let loanCode = l.Deduction.length < maxLength ? l.Deduction : l.Deduction.substring(0, maxLength) + '...'
                    var amountt = Number(parseFloat(l.Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Balancess = Number(parseFloat(l.Bal).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    
                    return `<tr>
                                        <td>${loanCode}</td>
                                        <td>${amountt}</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Balancess}</td>
                                    </tr>`;
                });
                var strSaccoDeductionss = saccoOtherDed.join('');
                let saccoShares = response.shares.map(l => {
                    debugger
                    let remarks = l.Remarks.length < maxLength ? l.Remarks : l.Remarks.substring(0, maxLength) + '...'
                    var sharePaid = Number(parseFloat(l.Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var sharesAmount = Number(parseFloat(l.Amount).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    return `<tr>
                                <td>${remarks}</td>
                                <td>${sharePaid}</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>${sharesAmount}</td>
                            </tr>`;
                });
                var strSaccoShares = saccoShares.join('');
                let supPayslip = response.payrolls.map(s => {
                    s.Gpay = s.Gpay ? s.Gpay : 0;
                    s.Subsidy = s.Subsidy ? s.Subsidy : 0;
                    s.KgsSupplied = s.KgsSupplied ? s.KgsSupplied : 0;
                    let totalPrice = s.Gpay - s.Subsidy;
                    let subsidyRaw = "";
                    if (s.Subsidy) {
                        var kgss = Number(parseFloat(s.KgsSupplied).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        var Subsidy = Number(parseFloat(s.Subsidy).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        var SubsidyPrice = Number(parseFloat(response.price.SubsidyPrice).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        subsidyRaw = `<tr>
                                        <td>TRADERS FEE:</td>
                                        <td>${kgss}</td>
                                        <td></td>
                                        <td>${SubsidyPrice}</td>
                                        <td></td>
                                        <td>${Subsidy}</td>
                                    </tr>`;
                    }
                    let advanceRaw = "";
                    if (s.AI) {
                        var ai = Number(parseFloat(s.AI).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        advanceRaw = `<tr>
                                        <td>AI</td>
                                        <td>${ai} </td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>`;
                    }//
                    if (s.NOV_OVPMNT) {
                        var NOV_OVPMNT = Number(parseFloat(s.NOV_OVPMNT).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        advanceRaw = `<tr>
                                        <td>NOV_OVPMNT</td>
                                        <td>${NOV_OVPMNT} </td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>`;
                    }
                    if (s.KIIGA) {
                        var KIIGA = Number(parseFloat(s.KIIGA).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        advanceRaw = `<tr>
                                        <td>KIIGA</td>
                                        <td>${KIIGA} </td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>`;
                    }
                    var unitPrices = Math.round(totalPrice / s.KgsSupplied);
                    var unitPrice = Number(parseFloat(unitPrices).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 1 });
                    let paidOrders = standingOrders.filter(p => p.Sno === s.Sno && p.Description == "Society Shares");
                    paidOrders = paidOrders ? paidOrders : [];
                    paidOrders[0] = paidOrders[0] ? paidOrders[0] : {};
                    paidOrders[0].Paid = paidOrders[0].Paid ? paidOrders[0].Paid : 0;
                    totalPrice = Number(parseFloat(totalPrice).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Gross = Number(parseFloat(s.Gpay).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var kgs = Number(parseFloat(s.KgsSupplied).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Agrovet = Number(parseFloat(s.Agrovet).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Hshares = Number(parseFloat(s.Hshares).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Paid = Number(parseFloat(paidOrders[0].Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Tdeductions = Number(parseFloat(s.Tdeductions).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Npay = Number(parseFloat(s.Npay).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    return `<tr>
                                <td>KGS DLVRD</td>
                                <td>${kgs}</td>
                                <td></td>
                                <td>${unitPrice}</td>
                                <td></td>
                                <td>${totalPrice}</td>
                            </tr>
                            ${subsidyRaw}
                            <tr>
                                <td>TOTAL PAY</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>${Gross}</td>
                            </tr>
                            
                            ${saccoOtherDed}
                            ${strSaccoLoans}
                            <tr>
                                <td>SOCIETY</td>
                                <td>${Hshares}</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>${Paid}</td>
                            </tr>
                            ${strSaccoShares}
                            <tr>
                                <td>TOTAL DED</td>
                                <td>${Tdeductions}</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                            <tr>
                                <td>NET PAY</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>${Npay}</td>
                            </tr>
                                    `;
                });
                var strSupPayslip = supPayslip.join('');
                var htmlSupPayslip = `<table>
                                    <thead>
                                        <tr> </tr>
                                    </thead>

                                    <tbody>${strSupPayslip}</tbody>
                                   </table>`;

                let curDate = new Date().toLocaleDateString('en-GB');
                var content = `<div class="row" id="printMe">
                                                <div class="col-xs-12 text-center">
                                                     <h5>
                                                        ${response.company.Name}</br>
                                                        Payment slip for ${date}
                                                      </h5>
                                                        DATE: ${curDate}</br>
                                                        SNO: ${filter.code}</br>
                                                        Name: ${response.supplier.Names}</br>
                                                        VEHICLE: ${response.transporter.CertNo}</br>
                                                        Bank: ${response.supplier.Bcode}</br>
                                                        *************************</br>
                                                        ${htmlSupPayslip}</br>
                                                    <h6>DEVELOP BY: AMTECH TECHNOLOGIES LIMITED </h6>
                                                        **************************
                                                    <hr>
                                                </div>
                                           </div>`;

                return content;
            }

            function generateBanksHTML(response, filter) {
                response.company = response.company ? response.company : {};
                var date = new Date(filter.date).toLocaleString('en-us', { month: 'short', year: 'numeric' });
                let curDate = new Date().toLocaleDateString('en-GB');
                let content = "";
                let maxLength = 6;
                
                response.banksPayslip.forEach(s => {

                    s.payroll.Gpay = s.payroll.Gpay ? s.payroll.Gpay : 0;
                    s.payroll.Subsidy = s.payroll.Subsidy ? s.payroll.Subsidy : 0;
                    s.payroll.KgsSupplied = s.payroll.KgsSupplied ? s.payroll.KgsSupplied : 0;
                    let totalPrice = s.payroll.Gpay - s.payroll.Subsidy;
                    

                    let saccoLoans = s.loans.map(l => {
                        let loanCode = l.LoanCode.length < maxLength ? l.LoanCode : l.LoanCode.substring(0, maxLength) + '...'
                        var amountt = Number(parseFloat(l.Amount).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        var Balancess = Number(parseFloat(l.Balance).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        return `<tr>
                                                <td>${loanCode}</td>
                                                <td>${amountt}</td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td>${Balancess}</td>
                                            </tr>`;
                    });
                    var strSaccoLoans = saccoLoans.join('');

                    let saccoOtherDed = s.deductionsbal.map(l => {
                        let loanCode = l.Deduction.length < maxLength ? l.Deduction : l.Deduction.substring(0, maxLength) + '...'
                        var amountt = Number(parseFloat(l.Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        var Balancess = Number(parseFloat(l.Bal).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });

                        return `<tr>
                                                        <td>${loanCode}</td>
                                                        <td>${amountt}</td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td>${Balancess}</td>
                                                    </tr>`;
                    });
                    var strSaccoDeductionss = saccoOtherDed.join('');

                    let saccoShares = s.shares.map(l => {
                        debugger
                        let remarks = l.Remarks.length < maxLength ? l.Remarks : l.Remarks.substring(0, maxLength) + '...'
                        var sharePaid = Number(parseFloat(l.Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        debugger
                        var sharesAmount = Number(parseFloat(l.Amount).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                        return `<tr>
                                                        <td>${remarks}</td>
                                                        <td>${sharePaid}</td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td>${sharesAmount}</td>
                                                    </tr>`;
                    });
                    var strSaccoShares = saccoShares.join('');
                    var unitPrices = Math.round(totalPrice / s.payroll.KgsSupplied);
                    var kgs = Number(parseFloat(s.payroll.KgsSupplied).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var unitPrice = Number(parseFloat(unitPrices).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 1 });
                    var Gross = Number(parseFloat(s.payroll.Gpay).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    totalPrice = Number(parseFloat(totalPrice).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    let paidOrders = standingOrders.filter(p => p.Sno === s.Sno && p.Description == "Society Shares");
                    paidOrders = paidOrders ? paidOrders : [];
                    paidOrders[0] = paidOrders[0] ? paidOrders[0] : {};
                    paidOrders[0].Paid = paidOrders[0].Paid ? paidOrders[0].Paid : 0;
                    var Hshares = Number(parseFloat(s.payroll.Hshares).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Paid = Number(parseFloat(paidOrders[0].Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Tdeductions = Number(parseFloat(s.payroll.Tdeductions).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Npay = Number(parseFloat(s.payroll.Npay).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    content = `${content}<div class="row" id="printMe">
                        <div class="col-xs-12 text-center">
                            <h5>
                                ${response.company.Name}</br>
                                Payment slip for ${date}
                            </h5>
                            DATE: ${curDate}</br>
                            SNO: ${s.Sno}</br>
                            Name: ${s.Names}</br>
                            VEHICLE: ${s.CertNo}</br>
                            Bank: ${filter.code}</br>
                            *************************</br>
                            <table>
                                <thead>
                                    <tr> </tr>
                                </thead>

                                <tbody>
                                    <tr>
                                        <td>KGs</td>
                                        <td>${kgs}</td>
                                        <td></td>
                                        <td>${unitPrice}</td>
                                        <td></td>
                                        <td>${totalPrice}</td>
                                    </tr>
                                    <tr>
                                        <td>TOTAL</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Gross}</td>
                                    </tr>
                                    ${strSaccoDeductionss}
                                    ${strSaccoLoans}
                                    <tr>
                                        <td>SOCIETY</td>
                                        <td>${Hshares}</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Paid}</td>
                                    </tr>
                                    ${strSaccoShares}
                                    <tr>
                                        <td>TOTAL DED</td>
                                        <td>${Tdeductions}</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td>NET PAY</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Npay}</td>
                                    </tr>
                                </tbody>
                                </table></br>
                            <h6>DEVELOP BY: AMTECH TECHNOLOGIES LIMITED </h6>
                                **************************
                            <hr>
                        </div>
                    </div> `;
                });

                return content;
            }
        });
    </script>
}

