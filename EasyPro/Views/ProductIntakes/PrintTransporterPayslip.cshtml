<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="form-element-list mg-t-30">
            <form asp-action="PrintTransporterPayslip">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 cmp-tb-hd">
                        <h2>Print Transporter Payslip</h2>
                    </div>
                    <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12" id="zone1">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                        </div>
                    </div>
                </div>
                <hr />
              
                <div class="row" id="farmer_section">
                    <div class="col-sm-4 col-xs-12">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                            <div class="nk-int-st">
                                <div class="form-group">
                                    <label class="control-label">Transporter</label>
                                    <select id="transCode" class="chzn-select form-control" asp-items="@ViewBag.codes" required>
                                        <option value=""></option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 col-xs-12">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                            <div class="nk-int-st">
                                <div class="form-group">
                                    <label class="control-label">Names</label>
                                    <input id="name" readonly class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>
                    
                     <div class="col-sm-4 col-xs-12">
                        <div class="form-group ic-cmp-int float-lb floating-lb">
                            <div class="nk-int-st">
                                <div class="form-group">
                                    <label class="control-label">End Month Date</label>
                                    <input id="date" type="date" class="form-control" required />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <hr />
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <a id="print" class="btn btn-success">
                            Print
                            <img id="payslip_loading" src="~/Images/Loading.gif" alt="Loading" width="50" height="30">
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        $(function () {
            let standingOrders = @Html.Raw(Json.Serialize(ViewBag.standingOrders));
            $(".chzn-select").chosen();
            $('#payslip_loading').hide();
            var today = new Date().toISOString().split('T')[0];
            $("#date").val(today);

            $('#transCode').on('change', function (){
                var transCode = $("#transCode").val();
                var transporters = @Html.Raw(Json.Serialize(ViewBag.transporters));
                var selectTransporters = transporters.filter(p => p.CertNo === transCode);
                if (selectTransporters[0]) {
                    $("#name").val(selectTransporters[0].TransName);
                }
            });

            $('#print').on('click', function () {
                $('#payslip_loading').show();
                var date = $("#date").val();
                var name = $("#name").val();
                var code = $("#transCode").val();
                var filter = {
                    date: date,
                    code: code,
                    name: name
                };

                if (code && date) {
                    $.ajax({
                        type: 'POST',
                        url: "printTransporterPayslip",
                        contentType: 'application/json',
                        data: JSON.stringify(filter),
                        success: function (response) {
                            $('#payslip_loading').hide();
                            $("#date").val('');
                            $("#name").val('');
                            var content = generateHTML(response, filter);;
                            printJS({
                                printable: content,
                                type: 'raw-html',
                                style: '.blueText {color:blue;}; #printMe { font-size: 11px; }'
                            });
                        },
                        failure: function (response) {
                        }
                    }).then(function () {
                        // ...
                    });
                }
            });
            
            function generateHTML(response, filter) {
                let mevng = $('#mevng').val();
                response.transporter = response.transporter ? response.transporter : {};
                let date = new Date(filter.date).toLocaleString('en-us', { month: 'short', year: 'numeric' });
                let maxLength = 6;
                let saccoLoans = response.loans.map(l => {
                    let loanCode = l.LoanCode.length < maxLength ? l.LoanCode : l.LoanCode.substring(0, maxLength) + '...'
                    var amountt = Number(parseFloat(l.Amount).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Balancess = Number(parseFloat(l.Balance).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    return `<tr>
                                        <td>${loanCode}</td>
                                        <td>${amountt}</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Balancess}</td>
                                    </tr>`;
                });
                var strSaccoLoans = saccoLoans.join('');
                let saccoOtherDed = response.deductionsbal.map(l => {
                    let loanCode = l.Deduction.length < maxLength ? l.Deduction : l.Deduction.substring(0, maxLength) + '...'
                    var amountt = Number(parseFloat(l.Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Balancess = Number(parseFloat(l.Bal).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });

                    return `<tr>
                                                <td>${loanCode}</td>
                                                <td>${amountt}</td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td>${Balancess}</td>
                                            </tr>`;
                });
                var strSaccoDeductionss = saccoOtherDed.join('');
                let saccoShares = response.shares.map(l => {
                    let remarks = l.Remarks.length < maxLength ? l.Remarks : l.Remarks.substring(0, maxLength) + '...'
                    var sharePaid = Number(parseFloat(l.Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var sharesAmount = Number(parseFloat(l.Amount).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    return `<tr>
                                                <td>${remarks}</td>
                                                <td>${sharePaid}</td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td>${sharesAmount}</td>
                                            </tr>`;
                });
                var strSaccoShares = saccoShares.join('');
                let transporterPayslip = response.payrolls.map(s => {
                    s.GrossPay = s.GrossPay ? s.GrossPay : 0;
                    s.Subsidy = s.Subsidy ? s.Subsidy : 0;
                    s.QntySup = s.QntySup ? s.QntySup : 0;
                    let totalPrice = s.GrossPay - s.Subsidy;
                    let subsidyRaw = "";
                    if (s.Subsidy) {
                        subsidyRaw = `<tr>
                                                <td>SUBSIDY</td>
                                                <td>${s.QntySup}</td>
                                                <td></td>
                                                <td>${response.transporter.Rate}</td>
                                                <td></td>
                                                <td>${s.Subsidy}</td>
                                            </tr>`;
                    }
                    
                    let paidOrders = standingOrders.filter(p => p.Sno === s.Code && p.Description == "Society Shares");
                    paidOrders = paidOrders ? paidOrders : [];
                    paidOrders[0] = paidOrders[0] ? paidOrders[0] : {};
                    paidOrders[0].Paid = paidOrders[0].Paid ? paidOrders[0].Paid : 0;
                    totalPrice = Number(parseFloat(totalPrice).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var kgs = Number(parseFloat(s.QntySup).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var unitPrice = Number(parseFloat(response.transporter.Rate).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 1 });
                    var Gross = Number(parseFloat(s.GrossPay).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Hshares = Number(parseFloat(s.Hshares).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Paid = Number(parseFloat(paidOrders[0].Paid).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Tdeductions = Number(parseFloat(s.Totaldeductions).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    var Npay = Number(parseFloat(s.NetPay).toFixed(2)).toLocaleString('en', { minimumFractionDigits: 2 });
                    return `<tr>
                                        <td>KGs</td>
                                        <td>${kgs}</td>
                                        <td></td>
                                        <td>${unitPrice}</td>
                                        <td></td>
                                        <td>${totalPrice}</td>
                                    </tr>
                                    ${subsidyRaw}
                                    <tr>
                                        <td>TOTAL</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Gross}</td>
                                    </tr>
                                    ${strSaccoLoans}
                                    <tr>
                                        <td>SOCIETY</td>
                                        <td>${Hshares}</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Paid}</td>
                                    </tr>
                                    ${strSaccoShares}
                                    <tr>
                                        <td>TOTAL DED</td>
                                        <td>${Tdeductions}</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td>NET PAY</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>${Npay}</td>
                                    </tr>
                                            `;
                });

                var strTransporterPayslip = transporterPayslip.join('');
                var htmlTransPayslip = `<table>
                                            <thead>
                                                <tr> </tr>
                                            </thead>

                                            <tbody>${strTransporterPayslip}</tbody>
                                           </table>`;

                let curDate = new Date().toLocaleDateString('en-GB');
                var content = `<div class="row" id="printMe">
                                                        <div class="col-xs-12 text-center">
                                                             <h5>
                                                                ${response.company.Name}</br>
                                                                Payment slip for ${date}
                                                            </h5>
                                                            DATE: ${curDate}</br>
                                                            NAME: ${response.transporter.CertNo}</br>
                                                            CODE: ${response.transporter.TransCode}</br>
                                                            BANK: ${response.transporter.Bcode}</br>
                                                            *************************</br>
                                                            ${htmlTransPayslip}</br>
                                                            <h6>DEVELOP BY: AMTECH TECHNOLOGIES LIMITED </h6>
                                                                **************************
                                                            <hr>
                                                        </div>
                                                   </div>`;

                return content;
            }
        });
    </script>
}

